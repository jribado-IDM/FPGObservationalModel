# ndo_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(ndo_file), function(X)
#   readxl::read_excel(ndo_file, sheet = X) %>% mutate_all(as.character)))
ndo_file <- readxl::read_excel(ndo_file, sheet = "2020_PS") %>% mutate_all(as.character)
excel_file <- paste(project_dir, "combined_barcodes_2.23.25.xlsx", sep="/")
new_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(excel_file), function(X)
readxl::read_excel(excel_file, sheet = X) %>% mutate_all(as.character)))
all_barcodes <- dplyr::bind_rows(
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
ndo_barcodes %>%
dplyr::filter(Year < 2021) %>%
unique() %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
new_barcodes %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE))
)
barcode_summary <-
dplyr::filter(all_barcodes, X < 2) %>%
dplyr::group_by(CODE, Year) %>% summarise(count=n(), .groups = 'drop') %>%
dplyr::mutate(Year = as.numeric(Year)) %>%
dplyr::left_join(., dplyr::select(site_codes_combined, Region, District,  Site, Code) %>%
dplyr::rename("CODE"="Code") %>% unique()) %>%
dplyr::mutate(Region = stringr::str_to_title(Region),
District = stringr::str_to_title(District),
Site = stringr::str_to_title(Site))
site_order <- dplyr::filter(barcode_summary, !is.na(Region)) %>%
group_by(CODE) %>%
summarise(
n_years = n_distinct(Year),
first_year = min(Year, na.rm = TRUE)
) %>%
arrange(first_year, desc(n_years)) %>%
pull(CODE)
barcode_p <- dplyr::filter(barcode_summary, !is.na(Region)) %>%
mutate(CODE = factor(CODE, levels = site_order)) %>%
ggplot(aes(y=as.numeric(Year), x=CODE, fill=as.numeric(count))) +
geom_tile() +
geom_text(aes(label=count), color="white", size=2.5) +
scale_fill_gradientn(
name = "Samples",
colours = c("#67322EFF", "#99610AFF", "#C38F16FF", "#6E948CFF", "#2C6B67FF", "#175449FF", "#122C43FF"),
values = scales::rescale(c(0, 25, 75, 150, 300)),  # more room for upper values
breaks = c(25, 50, 100, 200, 300),
limits = c(0, max(barcode_summary$count))
, n) +
scale_y_continuous(
trans = "reverse",
breaks = seq(min(barcode_summary$Year), max(barcode_summary$Year), by = 1)
) +
labs(title="Barcode samples in Senegal", y="Collection Years", x="Site or Clinic", fill="Samples") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
guides(fill = "none")
SavePlots(barcode_p, project_dir, "SenegalBarcodeSamplesCodesFilterX1.png",
width = 6.5, height=4, dpi=300)
packages_to_install <- c('data.table', 'readxl', 'dplyr', 'tidyr', 'tibble',
'reshape2', 'stringr', 'ggplot2', 'ggpubr')
for(p in packages_to_install){
if(!p %in% installed.packages()[,1]){
install.packages(p, repos = "http://cran.us.r-project.org")
library(p, character.only = TRUE)
}
library(p, character.only = TRUE)
}
theme_set(theme_bw())
SavePlots <- function(ggplot_obj, plot_path, name, width=8, height=4, dpi=100){
ggsave(paste0(format(Sys.time(), "%Y%m%d"), "_", name),
plot = ggplot_obj,
path = plot_path,
width = width, height = height, units = c("in"),
dpi = dpi)
}
code_lookup <- tribble(
~CODE, ~ALT,
"BAG", "KLD", # Additions from Broad's "Samples sequenced at Broad for the Gates project (2019-2022).xlsx"
"BAG", "KD",
"BAN", "BN",
"BAR", "BR",
"CSS", "RT_CS",
"CSS", "CS",
"DEG", "DE",
"DIA", "TAM",
"DIA", "TA",
"DWR", "RT_DW",
"DWR", "DW",
"GAB", "GA",
"GMK", "RT_GM",
"GMK", "GM",
"GOU", "SED",
"GOU", "SG",
"KAB", "VLG",
"KAB", "VG",
"KAF", "KF",
"KDG", "KG",
"THI", "KML",
"THI", "KNL",
"THI", "MK",
"KOU", "KTL",
"KOU", "KO",
"MAD", "TBA",
"MAD", "TB",
"MAK", "NK",
"MAK", "MK",
"MAK", "MAKO",
"MOU", "MDR",
"MOU", "MO",
"NAB", "NJC",
"NAB", "NA/NB/NC",
"NDO", "MNB",
"NDT", "RT_ND",
"NDT", "ND",
"NSN", "RT_NS",
"NSN", "NS",
"OUA", "VLG",
"OUA", "VG",
"ROB", "RT_RB",
"ROB", "RB",
"ROS", "RT_RS",
"ROS", "RS",
"SES", "SE",
"SES", "DI",
"SLP", "TH",
"SMS", "KM",
"SMS", "MS",
"TAO", "RT_TA",
"TAO", "TY",
"TBK", "TO",
"TAO", "RTP", # Additions from Kate's combined_model_predictions_inc24.xlsx & CollectionSites_Type (3).xlsx
"SAK", "SED",
"SMS", "KMS",
"DIA", "TAM",
)
project_dir <- "~/OneDrive - Bill & Melinda Gates Foundation/Malaria/Data/senegal"
################################################################################
# Barcode counts
################################################################################
site_admins_pre2022 <- readxl::read_excel(paste(project_dir, "Samples sequenced at Broad for the Gates project (2019-2022).xlsx", sep="/"), sheet="Collection_sites")[1:36,]
site_admins_model <- readxl::read_excel(paste(project_dir, "combined_model_predictions_inc24.xlsx", sep="/"), sheet=1)
missing_model_admins <- unique(site_admins_pre2022$CODE)[!unique(site_admins_pre2022$CODE) %in% unique(site_admins_model$Code)]
old_to_merge <- dplyr::filter(site_admins_pre2022, CODE %in% missing_model_admins)[,1:5]
names(old_to_merge) <- c("Region", "District", "Site", "Site_Type", "Code")
site_codes_combined <- bind_rows(site_admins_model, old_to_merge)
old_barcodes <- readxl::read_excel(paste(project_dir, "Senegal_AllBarcodes_20200701.xlsx", sep="/"), sheet=3)  %>% mutate_all(as.character)
ndo_file <- paste(project_dir, "barcodes_NDO_1.30.2024_coi_results.xlsx", sep="/")
# ndo_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(ndo_file), function(X)
#   readxl::read_excel(ndo_file, sheet = X) %>% mutate_all(as.character)))
ndo_file <- readxl::read_excel(ndo_file, sheet = "2020_PS") %>% mutate_all(as.character)
View(ndo_file)
excel_file <- paste(project_dir, "combined_barcodes_2.23.25.xlsx", sep="/")
new_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(excel_file), function(X)
readxl::read_excel(excel_file, sheet = X) %>% mutate_all(as.character)))
all_barcodes <- dplyr::bind_rows(
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
ndo_barcodes %>%
dplyr::filter(Year < 2021) %>%
unique() %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
new_barcodes %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE))
)
barcode_summary <-
dplyr::filter(all_barcodes, X < 2) %>%
dplyr::group_by(CODE, Year) %>% summarise(count=n(), .groups = 'drop') %>%
dplyr::mutate(Year = as.numeric(Year)) %>%
dplyr::left_join(., dplyr::select(site_codes_combined, Region, District,  Site, Code) %>%
dplyr::rename("CODE"="Code") %>% unique()) %>%
dplyr::mutate(Region = stringr::str_to_title(Region),
District = stringr::str_to_title(District),
Site = stringr::str_to_title(Site))
all_barcodes <- dplyr::bind_rows(
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
ndo_barcodes %>%
dplyr::filter(Year < 2021) %>%
unique() %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
new_barcodes %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE))
)
old_barcodes <- readxl::read_excel(paste(project_dir, "Senegal_AllBarcodes_20200701.xlsx", sep="/"), sheet=3)  %>% mutate_all(as.character)
ndo_file <- paste(project_dir, "barcodes_NDO_1.30.2024_coi_results.xlsx", sep="/")
# ndo_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(ndo_file), function(X)
#   readxl::read_excel(ndo_file, sheet = X) %>% mutate_all(as.character)))
ndo_barcodes <- readxl::read_excel(ndo_file, sheet = "2020_PS") %>% mutate_all(as.character)
excel_file <- paste(project_dir, "combined_barcodes_2.23.25.xlsx", sep="/")
new_barcodes <- dplyr::bind_rows(lapply(readxl::excel_sheets(excel_file), function(X)
readxl::read_excel(excel_file, sheet = X) %>% mutate_all(as.character)))
all_barcodes <- dplyr::bind_rows(
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
ndo_barcodes %>%
dplyr::filter(Year < 2021) %>%
unique() %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)),
new_barcodes %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE))
)
barcode_summary <-
dplyr::filter(all_barcodes, X < 2) %>%
dplyr::group_by(CODE, Year) %>% summarise(count=n(), .groups = 'drop') %>%
dplyr::mutate(Year = as.numeric(Year)) %>%
dplyr::left_join(., dplyr::select(site_codes_combined, Region, District,  Site, Code) %>%
dplyr::rename("CODE"="Code") %>% unique()) %>%
dplyr::mutate(Region = stringr::str_to_title(Region),
District = stringr::str_to_title(District),
Site = stringr::str_to_title(Site))
site_order <- dplyr::filter(barcode_summary, !is.na(Region)) %>%
group_by(CODE) %>%
summarise(
n_years = n_distinct(Year),
first_year = min(Year, na.rm = TRUE)
) %>%
arrange(first_year, desc(n_years)) %>%
pull(CODE)
barcode_p <- dplyr::filter(barcode_summary, !is.na(Region)) %>%
mutate(CODE = factor(CODE, levels = site_order)) %>%
ggplot(aes(y=as.numeric(Year), x=CODE, fill=as.numeric(count))) +
geom_tile() +
geom_text(aes(label=count), color="white", size=2.5) +
scale_fill_gradientn(
name = "Samples",
colours = c("#67322EFF", "#99610AFF", "#C38F16FF", "#6E948CFF", "#2C6B67FF", "#175449FF", "#122C43FF"),
values = scales::rescale(c(0, 25, 75, 150, 300)),  # more room for upper values
breaks = c(25, 50, 100, 200, 300),
limits = c(0, max(barcode_summary$count))
, n) +
scale_y_continuous(
trans = "reverse",
breaks = seq(min(barcode_summary$Year), max(barcode_summary$Year), by = 1)
) +
labs(title="Barcode samples in Senegal", y="Collection Years", x="Site or Clinic", fill="Samples") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
guides(fill = "none")
SavePlots(barcode_p, project_dir, "SenegalBarcodeSamplesCodesFilterX1.png",
width = 6.5, height=4, dpi=300)
View(barcode_summary)
View(site_admins_pre2022)
View(site_admins_model)
View(site_codes_combined)
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE))
dplyr::filter(old_barcodes, !Sample_Name %in% new_barcodes$Sample_Name) %>%
dplyr::left_join(., dplyr::rename(code_lookup, "ISO3" = "ALT")) %>%
dplyr::mutate(CODE = ifelse(is.na(CODE), ISO3, CODE)) -> t
View(t)
View(all_barcodes)
View(all_barcodes)
View(ndo_barcodes)
View(ndo_barcodes)
needed_packages <- c('data.table', 'dplyr', 'tidyr', 'purrr',
'ggplot2','ggpubr', 'ggh4x', 'gtools', 'rstatix')
for(p in needed_packages){
if(!p %in% installed.packages()[,1]){
install.packages(p)
library(p, character.only = TRUE)
}
library(p, character.only = TRUE)
}
# load helper functions
source("temporal_plotting.R")
source("incidence_statistics.R")
source("incidence_bin_plotting.R")
# Set directories
#dir <- '/mnt/data/malaria/synthetic_genomes/jessica_projects/2504_GRSweep'
dir <- '/Users/jribado/Library/CloudStorage/OneDrive-Bill&MelindaGatesFoundation/Malaria/Presentations/202504_GR-SeasonalSamplingEffects'
summary_dir <- paste(dir, "infectionFPGReport_summaries_6yr_trueCOIadded", sep="/")
plot_dir <- paste(dir, "plot_newITNs_6yr_timeShift_trueCOI", sep="/")
if (!dir.exists(plot_dir)){ dir.create(plot_dir, recursive = TRUE) }
# create mapping file to run with observational_extracted.py to give matched sim_id names
# sim_epi_mapping  <- data.table::fread(paste(dir, "sim_data_epi_new_itns_6yr.csv", sep="/")) %>%
#   dplyr::select(sim_id, outpath) %>% unique() %>%
#   dplyr::mutate(outpath = paste0("\"", gsub("/mnt/idm2/home/", "/mnt/calculon2/", outpath), "/output\"")) %>%
#   dplyr::rename(output_name=sim_id, input_dir=outpath)
# write.table(sim_epi_mapping, file = paste(dir, "sim_mapping_new_itns_6yr.csv", sep="/"), quote = F, row.names = F, sep=",")
shift_intervention_time = TRUE
intervention_month_shift = 29
month_start <- ifelse(isTRUE(shift_intervention_time), "intervention_month", "continuous_month")
intervention_intercept <- ifelse(isTRUE(shift_intervention_time), 0, intervention_month_shift)
# shift wet season shading for any intervention shifts
if(isTRUE(shift_intervention_time)){
highlight_periods <- highlight_periods - intervention_month_shift
}
################################################################################
# plotting options and functions
################################################################################
# Set plotting options
options(scipen=10000)
theme_set(theme_bw()+
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
#panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent', colour = NA), #transparent legend bg
legend.box.background = element_rect(fill='transparent', colour = NA),
legend.key = element_rect(fill=NA, colour = NA) #transparent legend panel
))
metric_labels <- c(
poly_coi_prop          = "Polygenomic\nproportion",
genome_ids_unique_prop = "Unique genome\nproportion",
cotransmission_prop    = "Cotransmission\nproportion",
superinfection_prop    = "Superinfections\nproportion",
effective_coi_mean    = "Mean complexity\nof infection",
true_coi_mean         = "Mean true complexity of infection"
)
metric_colors <- c(
poly_coi_prop          = "#81A88DFF",
genome_ids_unique_prop = "#02401BFF",
cotransmission_prop    = "#D8B70AFF",
superinfection_prop    = "#FDD262FF",
effective_coi_mean     = "#972D15FF",
true_coi_mean          = "#E68E54FF"
)
################################################################################
metrics <- c("reported_incidence_per_1k",
"true_incidence_per_1k",
"eir",
"pfpr")
# Function to summarize metrics for intervention shifted summary statistics of summary reports
Monthly2Yearly <- function(df){
df <- dplyr::select(df, -month)
group_cols <- setdiff(names(df), metrics)
df_summary <- df %>%
# 1) group by every column except the four metrics
group_by(across(all_of(group_cols))) %>%
# 2) sum each metric, dropping the grouping afterward
summarise(
across(all_of(metrics), ~ sum(.x, na.rm = TRUE)),
.groups = "drop"
)
return(df_summary)
}
TimeScaleSummaryStats <- function(df = year_summaries,
time_scale = "year",
bin = "start_who_bin") {
multi_sim_year_summary <- df %>%
dplyr::group_by(.data[[bin]], sampling_scheme, .data[[time_scale]]) %>%
summarise(
total_count = n(),               # <-- row count per group
across(
all_of(y_vars),
.fns = list(
mean   = ~mean(.x,   na.rm = TRUE),
median = ~median(.x, na.rm = TRUE),
sd     = ~sd(.x,     na.rm = TRUE)
),
.names = "{.col}_{.fn}"
),
.groups = "drop"
)
multisim_summary_long <- multi_sim_year_summary %>%
pivot_longer(
# keep the three identifier columns as-is
cols = -c(eval(bin), sampling_scheme, eval(time_scale), total_count),
names_to      = c("metric", ".value"),
names_pattern = "(.+?)_(sum|mean|median|sd)$"
)
return(multisim_summary_long)
}
################################################################################
# load data
################################################################################
senegal_data <- data.table::fread("/Users/jribado/Library/CloudStorage/OneDrive-Bill&MelindaGatesFoundation/Malaria/Data/senegal/combined_model_predictions_inc24_long.csv", sep=",") %>%
dplyr::mutate(sampling_scheme = "Senegal data")
sim_epi_monthly <- data.table::fread(paste(dir, "sim_data_epi_monthly_new_itns_6yr.csv", sep="/")) %>%
dplyr::mutate(continuous_month = ifelse(year == 0, month, (year*12) + month))
if(isTRUE(shift_intervention_time)){
sim_epi_monthly <- dplyr::rename(sim_epi_monthly, sim_year = year) %>%
dplyr::mutate(year = (continuous_month - intervention_month_shift) %/% 12,
intervention_month = continuous_month - intervention_month_shift)
emod_columns <- setdiff(names(sim_epi_monthly), c("sim_year", "month", "continuous_month", "intervention_month", metrics))
sim_epi_yearly <- sim_epi_monthly %>%
dplyr::group_by(across(all_of(c(emod_columns)))) %>%
dplyr::summarise(
reported_incidence_per_1k = sum(reported_incidence_per_1k),
true_incidence_per_1k = sum(true_incidence_per_1k),
eir = mean(eir),
pfpr=mean(pfpr), .groups = 'drop'
)
} else{
sim_epi_yearly  <- data.table::fread(paste(dir, "sim_data_epi_new_itns_6yr.csv", sep="/"))
if("month" %in% names(sim_epi_yearly)) {sim_epi_yearly <- Monthly2Yearly(sim_epi_monthly)}
}
sim_epi_yearly <- sim_epi_yearly %>%
dplyr::filter(habitat_scale > 6.8) %>%
dplyr::mutate(output_name = basename(outpath),
year_who_bin = case_when(
reported_incidence_per_1k < 100 ~ "Very low",
reported_incidence_per_1k < 250 ~ "Low",
reported_incidence_per_1k < 450 ~ "Moderate",
reported_incidence_per_1k > 450 ~ "High"
),
year_who_bin = factor(year_who_bin, levels = c("Very low", "Low", "Moderate", "High")))
sim_epi_yearly$year_incidence_bin <- cut(sim_epi_yearly$reported_incidence_per_1k,
seq(plyr::round_any(min(sim_epi_yearly$reported_incidence_per_1k), 50, f=floor),
plyr::round_any(max(sim_epi_yearly$reported_incidence_per_1k), 50, f=ceiling), 50),
include.lowest = TRUE)
sim_start_bins <- dplyr::filter(sim_epi_yearly, year==-1) %>% select(sim_id, year_who_bin) %>% unique() %>% rename(start_who_bin=year_who_bin)
sim_epi_yearly <- left_join(sim_epi_yearly, sim_start_bins)
sim_epi_monthly <- inner_join(sim_epi_monthly, sim_start_bins)
genetic_summary_files <- list.files(path = summary_dir, pattern = ".*_summary.csv")
genetic_stats_all <- dplyr::bind_rows(
lapply(setNames(genetic_summary_files, genetic_summary_files), function(i) data.table::fread(paste(summary_dir, i, sep="/"))),
.id = "sim_id") %>%
dplyr::mutate(sim_id = gsub("_summary.csv", "", sim_id))
year_summaries <- dplyr::filter(genetic_stats_all, !is.na(year) & is.na(continuous_month))
season_summary <- dplyr::filter(genetic_stats_all, grepl("Wet|Dry", season)) %>%
dplyr::mutate(year = as.numeric(sub(".*:\\s*(-?\\d+)-.*", "\\1", season)),
season = stringr::str_extract(season, "^\\w+"),
sampling_scheme = paste0(sampling_scheme, " (", season, ")"))
# peak_summary <- dplyr::filter(genetic_stats_all, grepl("Wet|Dry", peak_season)) %>%
#   dplyr::mutate(year = as.numeric(sub(".*:\\s*(-?\\d+)-.*", "\\1", peak_season)),
#                 season = stringr::str_extract(peak_season, "^\\w+"),
#                 sampling_scheme = paste0(sampling_scheme, " (", season, ")"))
year_summaries <- dplyr::bind_rows(year_summaries,
season_summary,
#peak_summary
) %>%
dplyr::inner_join(., sim_epi_yearly) %>%
dplyr::mutate(sampling_scheme = factor(sampling_scheme, levels = names(sampling_scheme_colors)))
month_summaries <- dplyr::filter(genetic_stats_all, !is.na(continuous_month)) %>%
dplyr::select(-year, -season) %>%
#dplyr::select(-year, -intervention_month, -month) %>%
dplyr::inner_join(., sim_epi_monthly) %>%
dplyr::mutate(season_group = case_when(
between(month, 10, 12) ~ "Peak wet season",
between(month, 3, 6) ~ "Peak dry season",
TRUE ~ "Other"),
intervention_month = continuous_month - intervention_month_shift,
year = intervention_month %/% 12
)
month_summaries <- dplyr::inner_join(month_summaries,
select(sim_epi_yearly, sim_id, year, reported_incidence_per_1k, year_who_bin) %>%
rename("year_incidence" = "reported_incidence_per_1k"))
max_infections <- max(month_summaries$genome_ids_total_count)
max_incidence <- max(month_summaries$reported_incidence_per_1k)
# set some time limits
time_vector <- sort(unique(month_summaries[[month_start]]))
shifted_full_years <- time_vector[time_vector%%12 == 0]
shifted_full_years <- shifted_full_years[shifted_full_years > -13]
highlight_subset <- dplyr::filter(highlight_periods, xmin > min(shifted_full_years) & xmin < max(shifted_full_years)) %>%
dplyr::mutate(xmax = ifelse(xmax > max(shifted_full_years), max(shifted_full_years), xmax))
sampling_subset <- names(sampling_scheme_colors)[c(1,4,6)]
year_summaries <- dplyr::filter(year_summaries, between(year, -1, 2) & sampling_scheme %in% sampling_subset)
month_summaries <- month_summaries %>% dplyr::filter(.[[month_start]] >= min(shifted_full_years) & .[[month_start]] <= max(shifted_full_years)-1)
y_vars <- c(names(genetic_stats_all)[grepl("prop|coi_mean", names(genetic_stats_all))])
y_labs <- gsub("\n" ," ", metric_labels)
y_names <- setNames(y_vars, c("Poly", "TrueCOI", "EffCOI", "Unique", "Cotransmission", "Superinfection"))
# Subset genetic metrics of interest
y_vars <- y_vars[!y_vars %in% c("true_coi_mean", "superinfection_prop")]
y_vars <- c("poly_coi_prop", "genome_ids_unique_prop", "cotransmission_prop", "effective_coi_mean")
input_metric = y_vars[4]
center_line <- c(1.33)#, 1.5)
points_df <- dplyr::bind_rows(lapply(center_lines, function(c){
count_df <- dplyr::filter(year_summaries, between(.data[[metric]], c - 0.01, c + 0.01)) %>%
dplyr::mutate(center_point = c)
return(count_df)
}))
center_lines <- c(1.33)#, 1.5)
points_df <- dplyr::bind_rows(lapply(center_lines, function(c){
count_df <- dplyr::filter(year_summaries, between(.data[[metric]], c - 0.01, c + 0.01)) %>%
dplyr::mutate(center_point = c)
return(count_df)
}))
################################################################################
# Incidence plots
################################################################################
input_metric = y_vars[4]
center_lines <- c(1.33, 1.5)
points_df <- dplyr::bind_rows(lapply(center_lines, function(c){
count_df <- dplyr::filter(year_summaries, between(.data[[input_metric]], c - 0.01, c + 0.01)) %>%
dplyr::mutate(center_point = c)
return(count_df)
}))
sampling_inc_summary <- dplyr::bind_rows(
SummarizeByGroups(
data         = points_df,
group_cols   = c("center_point"),
metric_col   = incidence) %>%
dplyr::mutate(sampling_scheme = "Both schemes combined"),
SummarizeByGroups(
data         = points_df,
group_cols   = c("center_point", "sampling_scheme"),
metric_col   = incidence)
)
head(points_df)
incidence = "reported_incidence_per_1k"
sampling_inc_summary <- dplyr::bind_rows(
SummarizeByGroups(
data         = points_df,
group_cols   = c("center_point"),
metric_col   = incidence) %>%
dplyr::mutate(sampling_scheme = "Both schemes combined"),
SummarizeByGroups(
data         = points_df,
group_cols   = c("center_point", "sampling_scheme"),
metric_col   = incidence)
)
View(sampling_inc_summary)
